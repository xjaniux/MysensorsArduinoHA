// Enable debug prints to serial monitor
#define MY_DEBUG


// Enable and select radio type attached
//#define MY_RADIO_RF24
//#define MY_RADIO_NRF5_ESB
//#define MY_RADIO_RFM69
//#define MY_RADIO_RFM95

// Set LOW transmit power level as default, if you have an amplified NRF-module and
// power your radio separately with a good regulator you can turn up PA level.
//#define MY_RF24_PA_LEVEL RF24_PA_LOW

// Enable serial gateway
#define MY_GATEWAY_SERIAL

// Define a lower baud rate for Arduinos running on 8 MHz (Arduino Pro Mini 3.3V & SenseBender)
#if F_CPU == 8000000L
#define MY_BAUD_RATE 38400
#endif

// Enable inclusion mode
#define MY_INCLUSION_MODE_FEATURE
// Enable Inclusion mode button on gateway
//#define MY_INCLUSION_BUTTON_FEATURE

// Inverses behavior of inclusion button (if using external pullup)
//#define MY_INCLUSION_BUTTON_EXTERNAL_PULLUP

// Set inclusion mode duration (in seconds)
#define MY_INCLUSION_MODE_DURATION 60
// Digital pin used for inclusion mode button
//#define MY_INCLUSION_MODE_BUTTON_PIN  3

// Set blinking period
#define MY_DEFAULT_LED_BLINK_PERIOD 300

// Inverses the behavior of leds
//#define MY_WITH_LEDS_BLINKING_INVERSE

// Flash leds on rx/tx/err
// Uncomment to override default HW configurations
//#define MY_DEFAULT_ERR_LED_PIN 4  // Error led pin
//#define MY_DEFAULT_RX_LED_PIN  6  // Receive led pin
//#define MY_DEFAULT_TX_LED_PIN  5  // the PCB, on board LED

#include <SPI.h>
#include <MySensors.h>  
#include <DallasTemperature.h>
#include <OneWire.h>

const int PINS[] = {4, 5, 6, 7, 8}; // I/O pins 4, 5, 6, 7, 8, A0, A1 for the relays 
#define NUMBER_OF_RELAYS 5 // Total number of attached relays
#define RELAY_ON 0  // GPIO value to write to turn on attached relay
#define RELAY_OFF 1 // GPIO value to write to turn off attached relay

#define COMPARE_TEMP 0 // Send temperature only if changed? 1 = Yes 0 = No

#define ONE_WIRE_BUS A0 // Pin where dallase sensor is connected 
#define MAX_ATTACHED_DS18B20 2
unsigned long SLEEP_TIME = 30000; // Sleep time between reads (in milliseconds)
// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

OneWire oneWire(ONE_WIRE_BUS); // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
DallasTemperature sensors(&oneWire); // Pass the oneWire reference to Dallas Temperature. 

byte D[3][8] = {
{ 0x28, 0xFF, 0x64, 0x0E, 0x79, 0x6B, 0x58, 0x52 },
{ 0x28, 0xFF, 0x64, 0x0E, 0x6D, 0x97, 0xB4, 0x18 }

};

float lastTemperature[MAX_ATTACHED_DS18B20];
int numSensors=0;
bool receivedConfig = false;
bool metric = true;
// Initialize temperature message
MyMessage msg(0,V_TEMP);

void before()
{
    for (int sensor=1; sensor<=NUMBER_OF_RELAYS; sensor++) {
        // Then set relay pins in output mode
        pinMode(PINS[sensor-1], OUTPUT);
        // Set relay to last known state (using eeprom storage)
        digitalWrite(PINS[sensor-1], loadState(sensor)?RELAY_ON:RELAY_OFF);     
    }
    
    // Startup up the OneWire library
    sensors.begin();
}

void setup()  
{ 
  // requestTemperatures() will not block current thread
  sensors.setWaitForConversion(false);
}

void presentation()
{
    // Send the sketch version information to the gateway and Controller
    sendSketchInfo("Relay and Temp", "1.0");

    for (int sensor=1; sensor<=NUMBER_OF_RELAYS+MAX_ATTACHED_DS18B20; sensor++) {
        // Register all sensors to gw (they will be created as child devices)

        if (sensor<=NUMBER_OF_RELAYS){  
          present(sensor, S_BINARY);       
        }
        else {
          present(sensor, S_TEMP);          
        }
    }
}

void loop()     
{     
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= SLEEP_TIME) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // Fetch temperatures from Dallas sensors
    sensors.requestTemperatures();
  
    // query conversion time and sleep until conversion completed
    int16_t conversionTime = sensors.millisToWaitForConversion(sensors.getResolution());
    // sleep() call can be replaced by wait() call if node need to process incoming messages (or if node is repeater)
    sleep(conversionTime);
  
    // Read temperatures and send them to controller 
    for (int i=0; i<MAX_ATTACHED_DS18B20; i++) {
  
      // Fetch and round temperature to one decimal
      // float temperature = static_cast<float>(static_cast<int>((getConfig().isMetric?sensors.getTempCByIndex(i):sensors.getTempFByIndex(i)) * 10.)) / 10.;
      float temperature = sensors.getTempC(D[i]);
      
      // Only send data if temperature has changed and no error
      if (COMPARE_TEMP == 1) {
        if (lastTemperature[i] != temperature && temperature != -127.00 && temperature != 85.00) {
            // Send in the new temperature
            send(msg.setSensor(i+NUMBER_OF_RELAYS+1).set(temperature,1));
            // Save new temperatures for next compare
            lastTemperature[i]=temperature;
        }
      }
      else {
        if (temperature != -127.00 && temperature != 85.00) {
            // Send in the new temperature
            send(msg.setSensor(i+NUMBER_OF_RELAYS+1).set(temperature,1));
            // Save new temperatures for next compare
            lastTemperature[i]=temperature;
        }
      }
    }
  }
}

void receive(const MyMessage &message)
{
    // We only expect one type of message from controller. But we better check anyway.
    if (message.type==V_STATUS) {
        // Change relay state
        digitalWrite(PINS[message.sensor-1], message.getBool()?RELAY_ON:RELAY_OFF);
        // Store state in eeprom
        saveState(message.sensor, message.getBool());
        // Write some debug info
        Serial.print("Incoming change for sensor:");
        Serial.print(message.sensor);
        Serial.print(", New status: ");
        Serial.println(message.getBool());
    }
}